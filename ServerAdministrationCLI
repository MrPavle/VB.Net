Imports Microsoft.Win32
Imports System.Net
Module ServerAdministrationCLI
    Sub Main()

        Dim args() As String = Environment.GetCommandLineArgs()
        Dim ComputerSwitchArg As String = String.Empty
        Dim ComputerNameArg As String = String.Empty

        If Not args.Length > 1 Then
            HelpMenu()
            Environment.Exit(1)
        Else
            Select Case args(1)
                Case "--GetIP"
                    GetComputerIPv4Address(Environment.MachineName)
                Case "--GetOS"
                    GetComputerOS(Environment.MachineName)
                Case "--GetSW"
                    GetComputerSoftwareInstalled(Environment.MachineName)
                Case "--GetCPU"
                    GetComputerCPU(Environment.MachineName)
                Case "--GetUpTime"
                    Console.WriteLine("UpTime - not available yet")
                Case "--GetAll"
                    Console.WriteLine("All - not available yet")
                Case Else
                    ComputerSwitchArg = args(1)
            End Select

            If args.Length > 2 Then
                ComputerNameArg = args(2)
            End If

        End If

        If ComputerSwitchArg = "--ComputerName" Or ComputerSwitchArg = "--C" Then

            If ComputerNameArg = "--C" Or ComputerNameArg = "--ComputerName" Then
                Console.WriteLine(" ** cannot use both ComputerName switches at the same time **")
                Environment.Exit(1)
            Else

                If ComputerNameArg = "--GetIP" Or ComputerNameArg = "--GetOS" Or ComputerNameArg = "--GetSW" Or ComputerNameArg = "--GetCPU" Or ComputerNameArg = "--GetUpTime" Then
                    Console.WriteLine(" ** used a switch without a computername **")
                    Environment.Exit(1)
                Else

                    If args.Length > 3 Then

                        For arg As Integer = 3 To args.Length - 1

                            Select Case args(arg)
                                Case "--GetIP"
                                    GetComputerIPv4Address(ComputerNameArg)
                                Case "--GetOS"
                                    GetComputerOS(ComputerNameArg)
                                Case "--GetSW"
                                    GetComputerSoftwareInstalled(ComputerNameArg)
                                Case "--GetCPU"
                                    GetComputerCPU(ComputerNameArg)
                                Case "--GetUpTime"
                                    Console.WriteLine("UpTime - not available yet")
                                Case "--GetAll"
                                    Console.WriteLine("All - not available yet")
                                Case Else
                                    Console.WriteLine(" ** no valid switch found **")
                                    Environment.Exit(1)
                            End Select

                        Next arg
                        Environment.Exit(0)
                    Else

                        Console.WriteLine(" ** you didnt add a switch after computername **")
                        Environment.Exit(1)

                    End If ' If args.Length > 3
                End If     ' If ComputerNameArg = "--GetIP" Or ComputerNameArg = "--GetOS" Or ComputerNameArg = "--GetSW" Or ComputerNameArg = "--GetCPU" Or ComputerNameArg = "--GetUpTime"
            End If         ' If ComputerNameArg = "--C" Or ComputerNameArg = "--ComputerName" Then

        ElseIf ComputerSwitchArg = "--h" Or ComputerSwitchArg = "/?" Then
            HelpMenu()
            Environment.Exit(0)
        End If ' If ComputerSwitchArg = "--ComputerName" Or ComputerSwitchArg = "--C"

    End Sub
    Private Sub HelpMenu()
        Console.WriteLine(vbCrLf & "Description: Get information from local or remote computer" & vbCrLf)
        Console.WriteLine("Available Switches:")
        Console.WriteLine("--ComputerName <computername> or --C <computername>")
        Console.WriteLine("  If no computer specified and a switch is, it will get information from local computer")
        Console.WriteLine("  Computer must be first (because I haven't programmed it to come after other " & vbCrLf & "  switches it will get local information instead)" & vbCrLf)
        Console.WriteLine("--GetIP   : Get IPv4 Address")
        Console.WriteLine("--GetOS   : Get OS Name")
        Console.WriteLine("--GetSW   : Get list of software installed")
        Console.WriteLine("--GetCPU  : Get CPU count")
        Console.WriteLine("--h or /? : Get command line switch help")
    End Sub
    Private Sub GetComputerOS(ByVal ComputerName As String)

        Dim OSKey As String = "Software\Microsoft\Windows NT\CurrentVersion\"

        Try
            Using rk As RegistryKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, ComputerName, RegistryView.Registry64).OpenSubKey(OSKey)
                Try
                    Console.WriteLine(CStr(rk.GetValue("ProductName")))
                Catch ex As Exception
                    Console.WriteLine("Error Message: " & ex.Message)
                End Try
            End Using

        Catch ex As Exception
            Console.WriteLine("!! Unable to connect to the computer: " & ComputerName & " !!")
            Console.WriteLine("Error Message: " & ex.Message)
        End Try

    End Sub

    Private Sub GetComputerSoftwareInstalled(ByVal ComputerName As String)

        Dim uninstallKey() As String = {"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall", "SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"}

        For Each key In uninstallKey

            Try
                Using rk As RegistryKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, ComputerName, RegistryView.Registry64).OpenSubKey(key)

                    Dim Applications As New List(Of String)()

                    For Each skName As String In rk.GetSubKeyNames()
                        Using sk As RegistryKey = rk.OpenSubKey(skName)

                            If Not CStr(sk.GetValue("DisplayName")) = "" Then
                                Try
                                    Applications.Add(CStr(sk.GetValue("DisplayName")) & " " & CStr(sk.GetValue("DisplayVersion")))
                                Catch ex As Exception
                                    Console.WriteLine("Error Message: " & ex.Message)
                                End Try
                            End If

                        End Using
                    Next

                    Applications.Sort()
                    For Each app As String In Applications
                        Console.WriteLine(app)
                    Next

                End Using

            Catch ex As Exception
                Console.WriteLine("!! Unable to connect to the computer: " & ComputerName & " !!")
                Console.WriteLine("Error Message: " & ex.Message)
            End Try

        Next key

    End Sub

    Private Sub GetComputerIPv4Address(ByVal ComputerName As String)

        For Each adr In System.Net.Dns.GetHostEntry(ComputerName).AddressList()
            If (adr.AddressFamily = Sockets.AddressFamily.InterNetwork) Then
                Console.WriteLine(adr.ToString())
            End If
        Next adr

    End Sub

    Private Sub GetComputerCPU(ByVal ComputerName As String)

        Dim key As String = "HARDWARE\DESCRIPTION\System\CentralProcessor"
        Dim rk As RegistryKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, ComputerName, RegistryView.Registry64).OpenSubKey(key)
        Dim skName As Array = rk.GetSubKeyNames()
        Console.WriteLine(skName.Length.ToString())

    End Sub

End Module
